@page "/profile/{userId:int}"
@inject Blazored.LocalStorage.ILocalStorageService ls;
@* @page "/profile/{Uid:int}" *@


@inject IJSRuntime JSRuntime
@using Infra.Helpers.ApiRequestHelper.UserApiRequest
@using Infra.Helpers.ApiRequestHelper.FriendApiRequest
@using Infra.Models

<PageTitle>HexTechX/ Profile</PageTitle>
<div class="container mx-0 my-4">
    <!-- Header -->
    <header class="text-black text-left py-2 pb-1 position-relative">
        <div class="d-flex position-relative">
            <button class="btn btn-outline-light me-3 active" @onclick="GoToNewFeed">
                <i class="bi bi-arrow-left"></i> Back
            </button>
            <h2 class="m-0">HexTechX</h2>
        </div>
    </header>
    <hr />
    <div class="row mt-2">
        <!-- Sidebar -->
        <aside class="col-md-3 text-center custom-sidebar">
            <img class="rounded-circle profile-image mb-3" src="image/RaidenEi.png" alt="Profile Image" />
            <h2 class="username">Profile</h2>
            <!-- Friend Requests Dropdown -->

            <div class="dropdown pe-2">
                <button @onclick="ToggleFriendList" class="friend-list-button">
                    Friend Lists (@friList.Count())
                </button>

                @if (isDropdownVisibleFriList)
                {
                    @if (friList != null && friList.Count() > 0)
                    {
                        <div class="friend-list-dropdown">
                            @foreach (var friend in friList)
                            {
                                <div class="friend-name d-flex justify-content-between align-items-center">
                                    <div class="me-auto">
                                        @friend.UserName
                                    </div>
                                    @if(isOwnProfile)
                                    {
                                        <div>
                                            <i class="fa-solid fa-trash text-danger" style="cursor: pointer;" @onclick="()=> RemoveFriend(loginUserId,friend.ID)"></i>
                                        </div>
                                    }

                                </div>
                            }
                        </div>
                    }
                }
            </div>

            <!-- Friend Request List Dropdown -->
            @if(isOwnProfile)
            {
                <div class="dropdown mt-2 pe-2">
                    <button @onclick="ToggleFriendRequest" class="friend-list-button">
                        Friend Requests (@friReqList.Count())
                    </button>

                    @if (isDropdownVisibleFriReq)
                    {
                        @if (friReqList != null && friReqList.Count() > 0)
                        {
                            <div class="friend-list-dropdown">
                                @foreach (var friendReq in friReqList)
                                {
                                    <div class="friend-name d-flex justify-content-between align-items-center">
                                        <div class="me-auto">
                                            @friendReq.FromUserName
                                        </div>
                                        <div>
                                            <i class="fa-solid fa-check text-success" style="cursor: pointer;" @onclick="()=> AcceptFriendRequest(friendReq.ID)"></i>

                                            <!-- Red Cross Icon -->
                                            <i class="fa-solid fa-xmark text-danger" style="cursor: pointer;" @onclick="()=> DeclineFriendRequest(friendReq.ID)"></i>
                                        </div>
                                    </div>
                                }

                            </div>
                        }
                    }
                </div>
            }

        </aside>

        <!-- Main Content -->
        <main class="col-md-9">
            <!-- Profile Info -->
            <div class="mb-4 p-3 shadow-sm rounded profile-info">
                <p><strong>Name: @(user?.User?.UserName ?? "Unknown User")</strong></p>
                <p><strong>Joined Since: @user?.User?.CreatedTime?.ToString("dd-MMM-yyyy hh:mm tt")</strong> </p>
                <p><strong>Total Posts: @(user?.TotalPosts ?? 0) </strong> | <strong>Total Likes Received: @(user?.TotalLikesReceived ?? 0)</strong> | <strong>Total Comments Received: @(user?.TotalCommentsReceived ?? 0)</strong> </p>

                <div class="button-container d-flex">
                    @if(isOwnProfile)
                    {
                        @* <button class="edit-button w-20 ms-2">
                        <i class="fas fa-edit"></i> Edit
                    </button> *@
                    }else if(user?.FriendshipStatus == "Not Friends")
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick=SendFriendRequest>+ Add Friend</button>
                    }
                    else if (user?.FriendshipStatus == "Incoming Friend Request")
                    {
                        <div class="fs-14 me-2">This user has friend request sent to you. </div>
                        <button type="button" class="btn btn-outline-primary me-2" @onclick="()=>AcceptFriendRequest(user.FriendRequestId ?? 0)">Accept</button>
                        <button type="button" class="btn btn-outline-danger" @onclick="()=>DeclineFriendRequest(user.FriendRequestId ?? 0)">Reject</button>
                    }
                    else if (user?.FriendshipStatus == "Friend Requested")
                    {
                        <div class="fs-14 me-2">Friend requested to this user. </div>
                        <button type="button" class="btn btn-outline-primary" @onclick=CancelFriendRequest>Cancel friend request</button>
                    }
                    else if (user?.FriendshipStatus == "Friends")
                    {
                        <button type="button" class="btn btn-outline-primary" @onclick="()=>RemoveFriend(loginUserId,userId)">Unfriend</button>
                    }

                </div>
            </div>
            <!-- Posts -->
            <section class="posts">
                <h3 class="mb-3">Posts</h3>
                <PostCard></PostCard>
            </section>
        </main>
    </div>
</div>

@code {

    [Inject]
    IUserApiRequest userRequest { get; set; }
    [Inject]
    IFriendApiRequest FriListRequest { get; set; }
    [Inject]
    IFriendRequestApiRequest FriReqRequest { get; set; }

    [Parameter]
    public int userId { get; set; }

    UserProfile user { get; set; } = new();
    List<User> friList { get; set; } = new();
    List<FriendRequest> friReqList { get; set; } = new();

    public int loginUserId { get; set; } = 0;
    /// <summary>
    /// DropDown
    /// </summary>
    bool isDropdownVisibleFriList { get; set; } = false; 
    bool isDropdownVisibleFriReq { get; set; } = false;
    bool isOwnProfile { get; set; } = false;

    private void ToggleFriendList()
    {
        isDropdownVisibleFriList = !isDropdownVisibleFriList;
    }
    private void ToggleFriendRequest()
    {
        isDropdownVisibleFriReq = !isDropdownVisibleFriReq; 
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                loginUserId = await ls.GetItemAsync<int>("userId");
                isOwnProfile = userId == loginUserId ? true : false;
                user = await userRequest.GetProfile(loginUserId, userId);

                if(isOwnProfile)
                {
                    await GetFriendReqList(userId);
                }
                await GetFriendList(userId);
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user data: {ex.Message}");
            }
        }

    }
    async Task GetFriendReqList(int localUid)
    {
        friReqList = await FriReqRequest.GetFriendRequest(loginUserId);
    }

    async Task GetFriendList(int localUid)
    {
        friList = await FriListRequest.GetFriends(localUid);
    }

    private async void GoToNewFeed()
    {
        await JSRuntime.InvokeVoidAsync("navigateTo", "/");
    }

    // Accept Friend Request
    private async Task AcceptFriendRequest(int friendRequestId)
    {
        var res = await FriReqRequest.RespondFriendRequest(friendRequestId, true);
        if (res == "success")
        {
            friReqList = friReqList.Where(req => req.ID != friendRequestId).ToList();
            await GetFriendList(userId);
            if(!isOwnProfile)
            {
                user.FriendshipStatus = "Friends";
            }
            await InvokeAsync(StateHasChanged);
        }

    }

    // Decline Friend Request
    private async Task DeclineFriendRequest(int friendRequestId)
    {
        var res = await FriReqRequest.RespondFriendRequest(friendRequestId, false);
        if (res == "friend request removed")
        {
            friReqList = friReqList.Where(req => req.ID != friendRequestId).ToList();
            if (!isOwnProfile)
            {
                user.FriendshipStatus = "Not Friends";
            }
            StateHasChanged();
        }

    }

    // Remove Friend 
    private async Task RemoveFriend(int userID,int friendListId)
    {
        var res = await FriListRequest.RemoveFriend(userID, friendListId);

        //await GetFriendList(userId);
        // Remove from the list
        friList = friList.Where(flist => flist.ID != friendListId).ToList();
        if (!isOwnProfile)
        {
            user.FriendshipStatus = "Not Friends";
        }
        StateHasChanged();
    }

    async Task SendFriendRequest()
    {
        FriendRequest request = new FriendRequest
        {
            FromUserID = loginUserId,
            ToUserID = userId,
        };
        var res = await FriReqRequest.SendFriendRequest(request);
        if(res == "success")
        {
            user.FriendshipStatus = "Friend Requested";
            StateHasChanged();
        }
    }

    async Task CancelFriendRequest()
    {
        var req = await FriReqRequest.GetByIds(loginUserId, userId);
        if(req.ID == 0)
        {
            return;
        }

        var res = await FriReqRequest.RespondFriendRequest(req.ID, false);
        if (res == "friend request removed")
        {
            user.FriendshipStatus = "Not Friends";
            StateHasChanged();
        }
    }
}


