@page "/"
@inject IJSRuntime JSRuntime
@using SocialWeb.Components
@using System.Collections.Generic
@using Infra.Helpers.ApiRequestHelper.PostApiRequest
@using Infra.Models

<PageTitle>HexTechX/ NewFeeds</PageTitle>
<div class="container my-4">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-3">
            <h2 class="mb-3">HexTechX</h2>
            <hr />
            <div class="mb-7">
                <div class="d-flex justify-content-between mt-2">

                    <div class="w-100">
                        <input type="text" class="form-control w-100" placeholder="Search" @bind-value=@search />
                    </div>
                    @if (!string.IsNullOrEmpty(search))
                    {
                        <div>
                            <button class="btn btn-secondary ms-2" @onclick="()=>Search(null)">Clear</button>

                        </div>
                    }
                </div>

                <div>
                    <button class="btn btn-primary w-100 mt-2" @onclick="()=>Search(search)"><i class="fa-solid fa-magnifying-glass"></i>Search</button>
                </div>


            </div>
            <div class="categories-section mt-3">
                <h3>Categories</h3>
                <div class="categories">
                    @if(tagList != null && tagList.Count() > 0)
                    {
                        <span class="category-item" @onclick="()=>SelectTag(null)">All</span>
                        foreach(var tag in tagList)
                        {
                            <span class="category-item @(selctag == tag.Text ? "bg-dark text-light" : "")" @onclick="()=>SelectTag(tag.Text)">@tag.Text (@tag.PostCount)</span>
                        }
                    }
                    @*    <span class="category-item">#Travel</span>
                    <span class="category-item">#DayTrip</span>
                    <span class="category-item">#Food</span>
                    <span class="category-item">#Shopping</span> *@
                </div>
            </div>
            <div class="profile-icon">
                <img src="image/profileIcon.jpg" alt="Profile Icon" class="profile-img" />
                <span class="btn" @onclick="GoToProfile">Profile</span>
            </div>

        </div>



        <div class="col-md-9 mt-5">
            <div class="mb-4">
                <input type="text" class="form-control" @onclick="()=>ShowCreatePostModal(1)" placeholder="Post something new..." />
            </div>
            @if(postList.Count() > 0)
            {
                <div class="d-flex flex-column" id="scroll-container" style="overflow-y: auto;">
                    @foreach (var post in postList)
                    {
                        <PostCard PostData="post"></PostCard>
                    }
                </div>
            }

            @*    <div class="card mb-3" @onclick="()=>ShowPostDetailModal(1)">
                <div class="card-header align-items-center">
                    <img src="image/RaidenEi.png" alt="Avatar" class="rounded-circle me-3" width="40" height="40">
                    <div>
                        <h6 class="mb-0">Mew</h6>
                        <small>12/25/2024</small>
                    </div>
                </div>
                <div class="card-body">
                    <p style="font:caption">Beach~~</p>
                    <div>
                        <a href="#" class="badge me-1">#Food</a>
                        <a href="#" class="badge">#Shopping</a>
                    </div>
                    <hr />
                    <div class="mt-3 actions">
                        <button class="btn btn-primary me-2"><i class="fa-solid fa-thumbs-up"></i> Like</button>
                        <button class="btn btn-primary"><i class="fa-solid fa-comment"></i> Comment</button>
                    </div>
                </div>
            </div> *@
        </div>
    </div>
</div>


<PopUpModal @ref="popUp" CloseCallBack="CloseCreatePostHandler" ModalTitle="CreateEditPost">
    <CreateEditPost @ref="createPopUp" ModalClose="CloseCreatePostHandler"></CreateEditPost>
</PopUpModal>

@code {
    [Inject]
    ITagApiRequest tagRequest { get; set; }
    [Inject]
    IPostApiRequest postRequest { get; set; }

    PopUpModal popUp { get; set; }
    CreateEditPost createPopUp { get; set; } = new CreateEditPost();
    List<Tag> tagList { get; set; } = new List<Tag>();
    Paging<Post> posts { get; set; } = new Paging<Post>();
    List<Post> postList { get; set; } = new List<Post>();

    int page = 1;
    int pageSize = 10;
    string? search { get; set; }
    string? selctag { get; set; }
    Post detailPost { get; set; } = new Post();

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            await GetTags();
            await GetPosts();
            await JSRuntime.InvokeVoidAsync("registerScrollEvent", DotNetObjectReference.Create(this));
            await InvokeAsync(StateHasChanged);
        }
    }

    private async void GoToProfile() => await JSRuntime.InvokeVoidAsync("navigateTo", "/profile");

    async Task GetTags()
    {
        tagList = await tagRequest.Get();
    }

    async Task GetPosts(string? searchStr = null, string? selectedTag = null)
    {
        search = searchStr;
        selctag = selectedTag;
        posts = await postRequest.GetPaging(page, pageSize, search, null, selctag);
        if(posts.Results != null && posts.Results.Count() > 0)
        {
            postList.AddRange(posts.Results);
        }
        await InvokeAsync(StateHasChanged);
    }
    [JSInvokable]
    public async Task OnScrollReachedBottom()
    {
        page = page + 1;
        await GetPosts();

    }

    async Task Search(string? search)
    {
        page = 1;
        postList = new List<Post>();
        if(string.IsNullOrEmpty(search))
        {
            await GetPosts(null, selctag);
        }else{
            await GetPosts(search, selctag);
        }
    }

    async Task SelectTag(string? tag)
    {
        page = 1;
        postList = new List<Post>();
        await GetPosts(search, tag);
    }
    void ShowCreatePostModal(int Id)
    {
        popUp.Show();
    }
    void CloseCreatePostHandler()
    {
        popUp.Close();
    }
   
}