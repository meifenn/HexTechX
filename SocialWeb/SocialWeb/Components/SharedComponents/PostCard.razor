@inject IJSRuntime JSRuntime
@inject Blazored.LocalStorage.ILocalStorageService ls;
@using SocialWeb.Components
@using Infra.Models
<!-- Post 1 with Image-->
@if(PostData != null)
{
    <div class="card mb-3" style="cursor: pointer;" >
        <div class="card-header d-flex align-items-center">
            <img src="image/RaidenEi.png" alt="Avatar" class="rounded-circle me-3" width="40" height="40">
            <div>
                @if(!IsAuthenticated)
                {
                    <span><h6 class="mb-0">@PostData.UploadedUserName</h6></span>
                }
                else
                {
                    <span @onclick="FromPosttoProfile"><h6 class="mb-0">@PostData.UploadedUserName</h6></span>
                }
                <small>@PostData.CreatedTime?.ToString("dd MMM yyyy hh:mm tt")</small>
            </div>
        </div>
        <div class="card-body">
            <p style="font:caption">@PostData.Title</p>
            @if(isDetail == true)
            {
                <p style="font:medium">@PostData.Description</p>
            }

            <div class="mb-2">
                @{
                    if(!string.IsNullOrEmpty(PostData?.Tags))
                    {
                        var tagList = PostData?.Tags.Split(",").ToList();
                        foreach (var tag in tagList)
                        {
                            <div class="badge me-1">@tag</div>
                        }
                    }

                }

            </div>
            <div class="image-grid">
                @if (!string.IsNullOrEmpty(PostData?.PhotoDatas))
                {
                    var photoList = PostData.PhotoDatas.Split(",").Take(4).ToList(); // Max 4 images
                    foreach (var photo in photoList)
                    {
                        var photoPath = $"/image/{photo}";
                        <div class="image-container">
                            <img src="@photoPath" alt="Image" />
                        </div>
                    }
                }
            </div>

            <hr />
            <div class="mt-3 actions">
                <button class="btn btn-primary me-2" style="font-size:small" @onclick="()=>HandleLike(PostData.ID)"><i class="fa-solid fa-thumbs-up"></i> Like (@(PostData?.LikeCount?.ToString() ?? "0"))</button>
                <button class="btn btn-primary me-2" style="font-size:small" @onclick="ShowPostDetail"><i class="fa-solid fa-comment"></i> Comment (@(PostData?.CommentCount?.ToString() ?? "0"))</button>
                @if(isDetail != true)
                {
                    <span class="fs-16 ps-2" style=" font-size:small;" @onclick="ShowPostDetail">Detail</span>
                }

                @if (!string.IsNullOrEmpty(AlertMessage))
                {
                    <div class="alert alert-danger mt-3" role="alert">
                        @AlertMessage
                        <button type="button" class="btn-close" @onclick="ClearAlert" style="float: right;"></button>
                    </div>
                }
            </div>
        </div>
    </div>
}

<PopUpModal @ref="popUp" CloseCallBack="ClosePostDetailHandler" ModalTitle="PostDetail">
    <PostDetail @ref="postDetail"
        post=@PostData 
        ModalClose="ClosePostDetailHandler"
        IsAuthenticated=@IsAuthenticated
        LoggedInUserId=@loggedInUserId></PostDetail>
</PopUpModal>


@code {
    @inject ILikeApiRequest likeRequest;

    private string AlertMessage { get; set; } = string.Empty;
    [Parameter]
    public Post? PostData { get; set; }
    [Parameter]
    public bool? isDetail { get; set; } = false;
    [Parameter]
    public int? loggedInUserId { get; set; }
    [Parameter]
    public bool IsAuthenticated { get; set; } = false;


    PopUpModal popUp { get; set; }
    PostDetail postDetail { get; set; }
    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if(firstRender)
        {
            try
            {
                await InvokeAsync(StateHasChanged);
            }
            catch (Exception ex)
            {
                Console.WriteLine($"Error fetching user data: {ex.Message}");
            }
        }
    }
    void ShowPostDetail()
    {
        popUp.Show();
    }
    void ClosePostDetailHandler()
    {
        popUp.Close();
    }

    async Task ShowMessageBox(string message)
    {
        await JSRuntime.InvokeVoidAsync("alert", message);
    }
    private async void FromPosttoProfile() => await JSRuntime.InvokeVoidAsync("navigateTo", $@"/profile/{PostData.UploadedById}");


    async Task HandleLike(int postId)
    {
        if (!IsAuthenticated)
        {
            ShowAlert("You must be logged in to Like a post.");
            return;
        }
        var res = await likeRequest.ProcessLike(loggedInUserId ?? 0, postId);
        if (res == "like success")
        {
            PostData.LikeCount += 1;
        }
        else if (res == "unlike success")
        {
            PostData.LikeCount -= 1;
        }
        await InvokeAsync(StateHasChanged);
    }

   
    void ShowAlert(string message)
    {
        ClearAlert();
        AlertMessage = message;
    }

    void ClearAlert()
    {
        AlertMessage = string.Empty;
    }


}